import { TemplateRef, ViewContainerRef } from '@angular/core';
import * as i0 from "@angular/core";
export declare class NguCarouselItemDirective {
    static ɵfac: i0.ɵɵFactoryDeclaration<NguCarouselItemDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NguCarouselItemDirective, "[NguCarouselItem]", never, {}, {}, never, never, false>;
}
export declare class NguCarouselNextDirective {
    static ɵfac: i0.ɵɵFactoryDeclaration<NguCarouselNextDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NguCarouselNextDirective, "[NguCarouselNext]", never, {}, {}, never, never, false>;
}
export declare class NguCarouselPrevDirective {
    static ɵfac: i0.ɵɵFactoryDeclaration<NguCarouselPrevDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NguCarouselPrevDirective, "[NguCarouselPrev]", never, {}, {}, never, never, false>;
}
export declare class NguCarouselPointDirective {
    static ɵfac: i0.ɵɵFactoryDeclaration<NguCarouselPointDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NguCarouselPointDirective, "[NguCarouselPoint]", never, {}, {}, never, never, false>;
}
export declare class NguCarouselDefDirective<T> {
    template: TemplateRef<any>;
    when: (index: number, nodeData: T) => boolean;
    constructor(template: TemplateRef<any>);
    static ɵfac: i0.ɵɵFactoryDeclaration<NguCarouselDefDirective<any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NguCarouselDefDirective<any>, "[nguCarouselDef]", never, {}, {}, never, never, false>;
}
export declare class NguCarouselOutlet {
    viewContainer: ViewContainerRef;
    constructor(viewContainer: ViewContainerRef);
    static ɵfac: i0.ɵɵFactoryDeclaration<NguCarouselOutlet, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NguCarouselOutlet, "[nguCarouselOutlet]", never, {}, {}, never, never, false>;
}
