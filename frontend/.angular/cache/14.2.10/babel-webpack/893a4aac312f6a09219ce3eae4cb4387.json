{"ast":null,"code":"import _asyncToGenerator from \"/home/dar/Escritorio/SMM/Surf-SMM/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport createDebug from 'debug';\nimport EventEmitter from 'eventemitter3';\nimport WebSocketIpml from 'isomorphic-ws';\nimport sha256 from 'crypto-js/sha256.js';\nimport Base64 from 'crypto-js/enc-base64.js';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar WebSocketOpCode;\n\n(function (WebSocketOpCode) {\n  /**\r\n   * The initial message sent by obs-websocket to newly connected clients.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n  WebSocketOpCode[WebSocketOpCode[\"Hello\"] = 0] = \"Hello\";\n  /**\r\n   * The message sent by a newly connected client to obs-websocket in response to a `Hello`.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  WebSocketOpCode[WebSocketOpCode[\"Identify\"] = 1] = \"Identify\";\n  /**\r\n   * The response sent by obs-websocket to a client after it has successfully identified with obs-websocket.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  WebSocketOpCode[WebSocketOpCode[\"Identified\"] = 2] = \"Identified\";\n  /**\r\n   * The message sent by an already-identified client to update identification parameters.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  WebSocketOpCode[WebSocketOpCode[\"Reidentify\"] = 3] = \"Reidentify\";\n  /**\r\n   * The message sent by obs-websocket containing an event payload.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  WebSocketOpCode[WebSocketOpCode[\"Event\"] = 5] = \"Event\";\n  /**\r\n   * The message sent by a client to obs-websocket to perform a request.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  WebSocketOpCode[WebSocketOpCode[\"Request\"] = 6] = \"Request\";\n  /**\r\n   * The message sent by obs-websocket in response to a particular request from a client.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  WebSocketOpCode[WebSocketOpCode[\"RequestResponse\"] = 7] = \"RequestResponse\";\n  /**\r\n   * The message sent by a client to obs-websocket to perform a batch of requests.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  WebSocketOpCode[WebSocketOpCode[\"RequestBatch\"] = 8] = \"RequestBatch\";\n  /**\r\n   * The message sent by obs-websocket in response to a particular batch of requests from a client.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  WebSocketOpCode[WebSocketOpCode[\"RequestBatchResponse\"] = 9] = \"RequestBatchResponse\";\n})(WebSocketOpCode || (WebSocketOpCode = {}));\n/* eslint-disable no-bitwise, @typescript-eslint/prefer-literal-enum-member */\n\n\nvar EventSubscription;\n\n(function (EventSubscription) {\n  /**\r\n   * Subcription value used to disable all events.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n  EventSubscription[EventSubscription[\"None\"] = 0] = \"None\";\n  /**\r\n   * Subscription value to receive events in the `General` category.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  EventSubscription[EventSubscription[\"General\"] = 1] = \"General\";\n  /**\r\n   * Subscription value to receive events in the `Config` category.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  EventSubscription[EventSubscription[\"Config\"] = 2] = \"Config\";\n  /**\r\n   * Subscription value to receive events in the `Scenes` category.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  EventSubscription[EventSubscription[\"Scenes\"] = 4] = \"Scenes\";\n  /**\r\n   * Subscription value to receive events in the `Inputs` category.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  EventSubscription[EventSubscription[\"Inputs\"] = 8] = \"Inputs\";\n  /**\r\n   * Subscription value to receive events in the `Transitions` category.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  EventSubscription[EventSubscription[\"Transitions\"] = 16] = \"Transitions\";\n  /**\r\n   * Subscription value to receive events in the `Filters` category.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  EventSubscription[EventSubscription[\"Filters\"] = 32] = \"Filters\";\n  /**\r\n   * Subscription value to receive events in the `Outputs` category.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  EventSubscription[EventSubscription[\"Outputs\"] = 64] = \"Outputs\";\n  /**\r\n   * Subscription value to receive events in the `SceneItems` category.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  EventSubscription[EventSubscription[\"SceneItems\"] = 128] = \"SceneItems\";\n  /**\r\n   * Subscription value to receive events in the `MediaInputs` category.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  EventSubscription[EventSubscription[\"MediaInputs\"] = 256] = \"MediaInputs\";\n  /**\r\n   * Subscription value to receive the `VendorEvent` event.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  EventSubscription[EventSubscription[\"Vendors\"] = 512] = \"Vendors\";\n  /**\r\n   * Subscription value to receive events in the `Ui` category.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  EventSubscription[EventSubscription[\"Ui\"] = 1024] = \"Ui\";\n  /**\r\n   * Helper to receive all non-high-volume events.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  EventSubscription[EventSubscription[\"All\"] = 1023] = \"All\";\n  /**\r\n   * Subscription value to receive the `InputVolumeMeters` high-volume event.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  EventSubscription[EventSubscription[\"InputVolumeMeters\"] = 65536] = \"InputVolumeMeters\";\n  /**\r\n   * Subscription value to receive the `InputActiveStateChanged` high-volume event.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  EventSubscription[EventSubscription[\"InputActiveStateChanged\"] = 131072] = \"InputActiveStateChanged\";\n  /**\r\n   * Subscription value to receive the `InputShowStateChanged` high-volume event.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  EventSubscription[EventSubscription[\"InputShowStateChanged\"] = 262144] = \"InputShowStateChanged\";\n  /**\r\n   * Subscription value to receive the `SceneItemTransformChanged` high-volume event.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  EventSubscription[EventSubscription[\"SceneItemTransformChanged\"] = 524288] = \"SceneItemTransformChanged\";\n})(EventSubscription || (EventSubscription = {}));\n/* eslint-enable no-bitwise, @typescript-eslint/prefer-literal-enum-member */\n\n\nvar RequestBatchExecutionType;\n\n(function (RequestBatchExecutionType) {\n  /**\r\n   * Not a request batch.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n  RequestBatchExecutionType[RequestBatchExecutionType[\"None\"] = -1] = \"None\";\n  /**\r\n   * A request batch which processes all requests serially, as fast as possible.\r\n   *\r\n   * Note: To introduce artificial delay, use the `Sleep` request and the `sleepMillis` request field.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  RequestBatchExecutionType[RequestBatchExecutionType[\"SerialRealtime\"] = 0] = \"SerialRealtime\";\n  /**\r\n   * A request batch type which processes all requests serially, in sync with the graphics thread. Designed to provide high accuracy for animations.\r\n   *\r\n   * Note: To introduce artificial delay, use the `Sleep` request and the `sleepFrames` request field.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  RequestBatchExecutionType[RequestBatchExecutionType[\"SerialFrame\"] = 1] = \"SerialFrame\";\n  /**\r\n   * A request batch type which processes all requests using all available threads in the thread pool.\r\n   *\r\n   * Note: This is mainly experimental, and only really shows its colors during requests which require lots of\r\n   * active processing, like `GetSourceScreenshot`.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  RequestBatchExecutionType[RequestBatchExecutionType[\"Parallel\"] = 2] = \"Parallel\";\n})(RequestBatchExecutionType || (RequestBatchExecutionType = {}));\n/**\r\n * SHA256 Hashing.\r\n *\r\n * @param  {string} [salt=''] salt.\r\n * @param  {string} [challenge=''] challenge.\r\n * @param  {string} msg Message to encode.\r\n * @returns {string} sha256 encoded string.\r\n */\n\n\nfunction authenticationHashing(salt, challenge, msg) {\n  const hash = Base64.stringify(sha256(msg + salt));\n  return Base64.stringify(sha256(hash + challenge));\n}\n\nconst _excluded = [\"authentication\", \"rpcVersion\"];\nconst debug = createDebug('obs-websocket-js');\n\nclass OBSWebSocketError extends Error {\n  constructor(code, message) {\n    super(message);\n    this.code = void 0;\n    this.code = code;\n  }\n\n}\n\nclass BaseOBSWebSocket extends EventEmitter {\n  constructor(...args) {\n    super(...args);\n    this._identified = false;\n    this.internalListeners = new EventEmitter();\n    this.socket = void 0;\n  }\n\n  static generateMessageId() {\n    return String(BaseOBSWebSocket.requestCounter++);\n  }\n\n  get identified() {\n    return this._identified;\n  }\n  /**\r\n   * Connect to an obs-websocket server\r\n   *\r\n   * @param url Websocket server to connect to (including ws:// or wss:// protocol)\r\n   * @param password Password\r\n   * @param identificationParams Data for Identify event\r\n   * @returns Hello & Identified messages data (combined)\r\n   */\n\n\n  connect(url = 'ws://127.0.0.1:4455', password, identificationParams = {}) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      var _this = _this2;\n\n      if (_this2.socket) {\n        yield _this2.disconnect();\n      }\n\n      try {\n        const connectionClosedPromise = _this2.internalEventPromise('ConnectionClosed');\n\n        const connectionErrorPromise = _this2.internalEventPromise('ConnectionError');\n\n        return yield Promise.race([_asyncToGenerator(function* () {\n          const hello = yield _this.createConnection(url);\n\n          _this.emit('Hello', hello);\n\n          return _this.identify(hello, password, identificationParams);\n        })(), // Choose the best promise for connection error/close\n        // In browser connection close has close code + reason,\n        // while in node error event has these\n        new Promise((resolve, reject) => {\n          void connectionErrorPromise.then(e => {\n            if (e.message) {\n              reject(e);\n            }\n          });\n          void connectionClosedPromise.then(e => {\n            reject(e);\n          });\n        })]);\n      } catch (error) {\n        yield _this2.disconnect();\n        throw error;\n      }\n    })();\n  }\n  /**\r\n   * Disconnect from obs-websocket server\r\n   */\n\n\n  disconnect() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this3.socket || _this3.socket.readyState === WebSocketIpml.CLOSED) {\n        return;\n      }\n\n      const connectionClosedPromise = _this3.internalEventPromise('ConnectionClosed');\n\n      _this3.socket.close();\n\n      yield connectionClosedPromise;\n    })();\n  }\n  /**\r\n   * Update session parameters\r\n   *\r\n   * @param data Reidentify data\r\n   * @returns Identified message data\r\n   */\n\n\n  reidentify(data) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const identifiedPromise = _this4.internalEventPromise(`op:${WebSocketOpCode.Identified}`);\n\n      yield _this4.message(WebSocketOpCode.Reidentify, data);\n      return identifiedPromise;\n    })();\n  }\n  /**\r\n   * Send a request to obs-websocket\r\n   *\r\n   * @param requestType Request name\r\n   * @param requestData Request data\r\n   * @returns Request response\r\n   */\n\n\n  call(requestType, requestData) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const requestId = BaseOBSWebSocket.generateMessageId();\n\n      const responsePromise = _this5.internalEventPromise(`res:${requestId}`);\n\n      yield _this5.message(WebSocketOpCode.Request, {\n        requestId,\n        requestType,\n        requestData\n      });\n      const {\n        requestStatus,\n        responseData\n      } = yield responsePromise;\n\n      if (!requestStatus.result) {\n        throw new OBSWebSocketError(requestStatus.code, requestStatus.comment);\n      }\n\n      return responseData;\n    })();\n  }\n  /**\r\n   * Send a batch request to obs-websocket\r\n   *\r\n   * @param requests Array of Request objects (type and data)\r\n   * @param options A set of options for how the batch will be executed\r\n   * @param options.executionType The mode of execution obs-websocket will run the batch in\r\n   * @param options.haltOnFailure Whether obs-websocket should stop executing the batch if one request fails\r\n   * @returns RequestBatch response\r\n   */\n\n\n  callBatch(requests, options = {}) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      const requestId = BaseOBSWebSocket.generateMessageId();\n\n      const responsePromise = _this6.internalEventPromise(`res:${requestId}`);\n\n      yield _this6.message(WebSocketOpCode.RequestBatch, _extends({\n        requestId,\n        requests\n      }, options));\n      const {\n        results\n      } = yield responsePromise;\n      return results;\n    })();\n  }\n  /**\r\n   * Cleanup from socket disconnection\r\n   */\n\n\n  cleanup() {\n    if (!this.socket) {\n      return;\n    }\n\n    this.socket.onopen = null;\n    this.socket.onmessage = null;\n    this.socket.onerror = null;\n    this.socket.onclose = null;\n    this.socket = undefined;\n    this._identified = false; // Cleanup leftovers\n\n    this.internalListeners.removeAllListeners();\n  }\n  /**\r\n   * Create connection to specified obs-websocket server\r\n   *\r\n   * @private\r\n   * @param url Websocket address\r\n   * @returns Promise for hello data\r\n   */\n\n\n  createConnection(url) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      var _this$socket;\n\n      const connectionOpenedPromise = _this7.internalEventPromise('ConnectionOpened');\n\n      const helloPromise = _this7.internalEventPromise(`op:${WebSocketOpCode.Hello}`);\n\n      _this7.socket = new WebSocketIpml(url, _this7.protocol);\n      _this7.socket.onopen = _this7.onOpen.bind(_this7);\n      _this7.socket.onmessage = _this7.onMessage.bind(_this7);\n      _this7.socket.onerror = _this7.onError.bind(_this7);\n      _this7.socket.onclose = _this7.onClose.bind(_this7);\n      yield connectionOpenedPromise;\n      const protocol = (_this$socket = _this7.socket) == null ? void 0 : _this$socket.protocol; // Browsers don't autoclose on missing/wrong protocol\n\n      if (!protocol) {\n        throw new OBSWebSocketError(-1, 'Server sent no subprotocol');\n      }\n\n      if (protocol !== _this7.protocol) {\n        throw new OBSWebSocketError(-1, 'Server sent an invalid subprotocol');\n      }\n\n      return helloPromise;\n    })();\n  }\n  /**\r\n   * Send identify message\r\n   *\r\n   * @private\r\n   * @param hello Hello message data\r\n   * @param password Password\r\n   * @param identificationParams Identification params\r\n   * @returns Hello & Identified messages data (combined)\r\n   */\n\n\n  identify(_ref, password, identificationParams = {}) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      let {\n        authentication,\n        rpcVersion\n      } = _ref,\n          helloRest = _objectWithoutPropertiesLoose(_ref, _excluded); // Set rpcVersion if unset\n\n\n      const data = _extends({\n        rpcVersion\n      }, identificationParams);\n\n      if (authentication && password) {\n        data.authentication = authenticationHashing(authentication.salt, authentication.challenge, password);\n      }\n\n      const identifiedPromise = _this8.internalEventPromise(`op:${WebSocketOpCode.Identified}`);\n\n      yield _this8.message(WebSocketOpCode.Identify, data);\n      const identified = yield identifiedPromise;\n      _this8._identified = true;\n\n      _this8.emit('Identified', identified);\n\n      return _extends({\n        rpcVersion\n      }, helloRest, identified);\n    })();\n  }\n  /**\r\n   * Send message to obs-websocket\r\n   *\r\n   * @private\r\n   * @param op WebSocketOpCode\r\n   * @param d Message data\r\n   */\n\n\n  message(op, d) {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this9.socket) {\n        throw new Error('Not connected');\n      }\n\n      if (!_this9.identified && op !== 1) {\n        throw new Error('Socket not identified');\n      }\n\n      const encoded = yield _this9.encodeMessage({\n        op,\n        d\n      });\n\n      _this9.socket.send(encoded);\n    })();\n  }\n  /**\r\n   * Create a promise to listen for an event on internal listener\r\n   * (will be cleaned up on disconnect)\r\n   *\r\n   * @private\r\n   * @param event Event to listen to\r\n   * @returns Event data\r\n   */\n\n\n  internalEventPromise(event) {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise(resolve => {\n        _this10.internalListeners.once(event, resolve);\n      });\n    })();\n  }\n  /**\r\n   * Websocket open event listener\r\n   *\r\n   * @private\r\n   * @param e Event\r\n   */\n\n\n  onOpen(e) {\n    debug('socket.open');\n    this.emit('ConnectionOpened');\n    this.internalListeners.emit('ConnectionOpened', e);\n  }\n  /**\r\n   * Websocket message event listener\r\n   *\r\n   * @private\r\n   * @param e Event\r\n   */\n\n\n  onMessage(e) {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const {\n          op,\n          d\n        } = yield _this11.decodeMessage(e.data);\n        debug('socket.message: %d %j', op, d);\n\n        if (op === undefined || d === undefined) {\n          return;\n        }\n\n        switch (op) {\n          case WebSocketOpCode.Event:\n            {\n              const {\n                eventType,\n                eventData\n              } = d; // @ts-expect-error Typescript just doesn't understand it\n\n              _this11.emit(eventType, eventData);\n\n              return;\n            }\n\n          case WebSocketOpCode.RequestResponse:\n          case WebSocketOpCode.RequestBatchResponse:\n            {\n              const {\n                requestId\n              } = d;\n\n              _this11.internalListeners.emit(`res:${requestId}`, d);\n\n              return;\n            }\n\n          default:\n            _this11.internalListeners.emit(`op:${op}`, d);\n\n        }\n      } catch (error) {\n        debug('error handling message: %o', error);\n      }\n    })();\n  }\n  /**\r\n   * Websocket error event listener\r\n   *\r\n   * @private\r\n   * @param e ErrorEvent\r\n   */\n\n\n  onError(e) {\n    debug('socket.error: %o', e);\n    const error = new OBSWebSocketError(-1, e.message);\n    this.emit('ConnectionError', error);\n    this.internalListeners.emit('ConnectionError', error);\n  }\n  /**\r\n   * Websocket close event listener\r\n   *\r\n   * @private\r\n   * @param e Event\r\n   */\n\n\n  onClose(e) {\n    debug('socket.close: %s (%d)', e.reason, e.code);\n    const error = new OBSWebSocketError(e.code, e.reason);\n    this.emit('ConnectionClosed', error);\n    this.internalListeners.emit('ConnectionClosed', error);\n    this.cleanup();\n  }\n\n} // https://github.com/developit/microbundle/issues/531#issuecomment-575473024\n// Not using ESM export due to it also being detected and breaking rollup based bundlers (vite)\n\n\nBaseOBSWebSocket.requestCounter = 1;\n\nif (typeof exports !== 'undefined') {\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n}\n\nclass OBSWebSocket extends BaseOBSWebSocket {\n  constructor(...args) {\n    super(...args);\n    this.protocol = 'obswebsocket.json';\n  }\n\n  encodeMessage(data) {\n    return _asyncToGenerator(function* () {\n      return JSON.stringify(data);\n    })();\n  }\n\n  decodeMessage(data) {\n    return _asyncToGenerator(function* () {\n      return JSON.parse(data);\n    })();\n  }\n\n}\n\nexport { EventSubscription, OBSWebSocketError, RequestBatchExecutionType, WebSocketOpCode, OBSWebSocket as default };","map":{"version":3,"names":["createDebug","EventEmitter","WebSocketIpml","sha256","Base64","_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","WebSocketOpCode","EventSubscription","RequestBatchExecutionType","authenticationHashing","salt","challenge","msg","hash","stringify","_excluded","debug","OBSWebSocketError","Error","constructor","code","message","BaseOBSWebSocket","args","_identified","internalListeners","socket","generateMessageId","String","requestCounter","identified","connect","url","password","identificationParams","_this","disconnect","connectionClosedPromise","internalEventPromise","connectionErrorPromise","Promise","race","hello","createConnection","emit","identify","resolve","reject","then","e","error","readyState","CLOSED","close","reidentify","data","identifiedPromise","Identified","Reidentify","requestType","requestData","requestId","responsePromise","Request","requestStatus","responseData","result","comment","callBatch","requests","options","RequestBatch","results","cleanup","onopen","onmessage","onerror","onclose","undefined","removeAllListeners","_this$socket","connectionOpenedPromise","helloPromise","Hello","protocol","onOpen","onMessage","onError","onClose","_ref","authentication","rpcVersion","helloRest","Identify","op","d","encoded","encodeMessage","send","event","once","decodeMessage","Event","eventType","eventData","RequestResponse","RequestBatchResponse","reason","exports","defineProperty","value","OBSWebSocket","JSON","parse","default"],"sources":["/home/dar/Escritorio/SMM/Surf-SMM/frontend/node_modules/obs-websocket-js/dist/json.modern.js"],"sourcesContent":["import createDebug from 'debug';\nimport EventEmitter from 'eventemitter3';\nimport WebSocketIpml from 'isomorphic-ws';\nimport sha256 from 'crypto-js/sha256.js';\nimport Base64 from 'crypto-js/enc-base64.js';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar WebSocketOpCode;\n\n(function (WebSocketOpCode) {\n  /**\r\n   * The initial message sent by obs-websocket to newly connected clients.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n  WebSocketOpCode[WebSocketOpCode[\"Hello\"] = 0] = \"Hello\";\n  /**\r\n   * The message sent by a newly connected client to obs-websocket in response to a `Hello`.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  WebSocketOpCode[WebSocketOpCode[\"Identify\"] = 1] = \"Identify\";\n  /**\r\n   * The response sent by obs-websocket to a client after it has successfully identified with obs-websocket.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  WebSocketOpCode[WebSocketOpCode[\"Identified\"] = 2] = \"Identified\";\n  /**\r\n   * The message sent by an already-identified client to update identification parameters.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  WebSocketOpCode[WebSocketOpCode[\"Reidentify\"] = 3] = \"Reidentify\";\n  /**\r\n   * The message sent by obs-websocket containing an event payload.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  WebSocketOpCode[WebSocketOpCode[\"Event\"] = 5] = \"Event\";\n  /**\r\n   * The message sent by a client to obs-websocket to perform a request.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  WebSocketOpCode[WebSocketOpCode[\"Request\"] = 6] = \"Request\";\n  /**\r\n   * The message sent by obs-websocket in response to a particular request from a client.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  WebSocketOpCode[WebSocketOpCode[\"RequestResponse\"] = 7] = \"RequestResponse\";\n  /**\r\n   * The message sent by a client to obs-websocket to perform a batch of requests.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  WebSocketOpCode[WebSocketOpCode[\"RequestBatch\"] = 8] = \"RequestBatch\";\n  /**\r\n   * The message sent by obs-websocket in response to a particular batch of requests from a client.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  WebSocketOpCode[WebSocketOpCode[\"RequestBatchResponse\"] = 9] = \"RequestBatchResponse\";\n})(WebSocketOpCode || (WebSocketOpCode = {}));\n/* eslint-disable no-bitwise, @typescript-eslint/prefer-literal-enum-member */\n\n\nvar EventSubscription;\n\n(function (EventSubscription) {\n  /**\r\n   * Subcription value used to disable all events.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n  EventSubscription[EventSubscription[\"None\"] = 0] = \"None\";\n  /**\r\n   * Subscription value to receive events in the `General` category.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  EventSubscription[EventSubscription[\"General\"] = 1] = \"General\";\n  /**\r\n   * Subscription value to receive events in the `Config` category.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  EventSubscription[EventSubscription[\"Config\"] = 2] = \"Config\";\n  /**\r\n   * Subscription value to receive events in the `Scenes` category.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  EventSubscription[EventSubscription[\"Scenes\"] = 4] = \"Scenes\";\n  /**\r\n   * Subscription value to receive events in the `Inputs` category.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  EventSubscription[EventSubscription[\"Inputs\"] = 8] = \"Inputs\";\n  /**\r\n   * Subscription value to receive events in the `Transitions` category.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  EventSubscription[EventSubscription[\"Transitions\"] = 16] = \"Transitions\";\n  /**\r\n   * Subscription value to receive events in the `Filters` category.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  EventSubscription[EventSubscription[\"Filters\"] = 32] = \"Filters\";\n  /**\r\n   * Subscription value to receive events in the `Outputs` category.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  EventSubscription[EventSubscription[\"Outputs\"] = 64] = \"Outputs\";\n  /**\r\n   * Subscription value to receive events in the `SceneItems` category.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  EventSubscription[EventSubscription[\"SceneItems\"] = 128] = \"SceneItems\";\n  /**\r\n   * Subscription value to receive events in the `MediaInputs` category.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  EventSubscription[EventSubscription[\"MediaInputs\"] = 256] = \"MediaInputs\";\n  /**\r\n   * Subscription value to receive the `VendorEvent` event.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  EventSubscription[EventSubscription[\"Vendors\"] = 512] = \"Vendors\";\n  /**\r\n   * Subscription value to receive events in the `Ui` category.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  EventSubscription[EventSubscription[\"Ui\"] = 1024] = \"Ui\";\n  /**\r\n   * Helper to receive all non-high-volume events.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  EventSubscription[EventSubscription[\"All\"] = 1023] = \"All\";\n  /**\r\n   * Subscription value to receive the `InputVolumeMeters` high-volume event.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  EventSubscription[EventSubscription[\"InputVolumeMeters\"] = 65536] = \"InputVolumeMeters\";\n  /**\r\n   * Subscription value to receive the `InputActiveStateChanged` high-volume event.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  EventSubscription[EventSubscription[\"InputActiveStateChanged\"] = 131072] = \"InputActiveStateChanged\";\n  /**\r\n   * Subscription value to receive the `InputShowStateChanged` high-volume event.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  EventSubscription[EventSubscription[\"InputShowStateChanged\"] = 262144] = \"InputShowStateChanged\";\n  /**\r\n   * Subscription value to receive the `SceneItemTransformChanged` high-volume event.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  EventSubscription[EventSubscription[\"SceneItemTransformChanged\"] = 524288] = \"SceneItemTransformChanged\";\n})(EventSubscription || (EventSubscription = {}));\n/* eslint-enable no-bitwise, @typescript-eslint/prefer-literal-enum-member */\n\n\nvar RequestBatchExecutionType;\n\n(function (RequestBatchExecutionType) {\n  /**\r\n   * Not a request batch.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n  RequestBatchExecutionType[RequestBatchExecutionType[\"None\"] = -1] = \"None\";\n  /**\r\n   * A request batch which processes all requests serially, as fast as possible.\r\n   *\r\n   * Note: To introduce artificial delay, use the `Sleep` request and the `sleepMillis` request field.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  RequestBatchExecutionType[RequestBatchExecutionType[\"SerialRealtime\"] = 0] = \"SerialRealtime\";\n  /**\r\n   * A request batch type which processes all requests serially, in sync with the graphics thread. Designed to provide high accuracy for animations.\r\n   *\r\n   * Note: To introduce artificial delay, use the `Sleep` request and the `sleepFrames` request field.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  RequestBatchExecutionType[RequestBatchExecutionType[\"SerialFrame\"] = 1] = \"SerialFrame\";\n  /**\r\n   * A request batch type which processes all requests using all available threads in the thread pool.\r\n   *\r\n   * Note: This is mainly experimental, and only really shows its colors during requests which require lots of\r\n   * active processing, like `GetSourceScreenshot`.\r\n   *\r\n   * Initial OBS Version: 5.0.0\r\n   */\n\n  RequestBatchExecutionType[RequestBatchExecutionType[\"Parallel\"] = 2] = \"Parallel\";\n})(RequestBatchExecutionType || (RequestBatchExecutionType = {}));\n\n/**\r\n * SHA256 Hashing.\r\n *\r\n * @param  {string} [salt=''] salt.\r\n * @param  {string} [challenge=''] challenge.\r\n * @param  {string} msg Message to encode.\r\n * @returns {string} sha256 encoded string.\r\n */\n\nfunction authenticationHashing (salt, challenge, msg) {\n  const hash = Base64.stringify(sha256(msg + salt));\n  return Base64.stringify(sha256(hash + challenge));\n}\n\nconst _excluded = [\"authentication\", \"rpcVersion\"];\nconst debug = createDebug('obs-websocket-js');\nclass OBSWebSocketError extends Error {\n  constructor(code, message) {\n    super(message);\n    this.code = void 0;\n    this.code = code;\n  }\n\n}\nclass BaseOBSWebSocket extends EventEmitter {\n  constructor(...args) {\n    super(...args);\n    this._identified = false;\n    this.internalListeners = new EventEmitter();\n    this.socket = void 0;\n  }\n\n  static generateMessageId() {\n    return String(BaseOBSWebSocket.requestCounter++);\n  }\n\n  get identified() {\n    return this._identified;\n  }\n  /**\r\n   * Connect to an obs-websocket server\r\n   *\r\n   * @param url Websocket server to connect to (including ws:// or wss:// protocol)\r\n   * @param password Password\r\n   * @param identificationParams Data for Identify event\r\n   * @returns Hello & Identified messages data (combined)\r\n   */\n\n\n  async connect(url = 'ws://127.0.0.1:4455', password, identificationParams = {}) {\n    var _this = this;\n\n    if (this.socket) {\n      await this.disconnect();\n    }\n\n    try {\n      const connectionClosedPromise = this.internalEventPromise('ConnectionClosed');\n      const connectionErrorPromise = this.internalEventPromise('ConnectionError');\n      return await Promise.race([async function () {\n        const hello = await _this.createConnection(url);\n\n        _this.emit('Hello', hello);\n\n        return _this.identify(hello, password, identificationParams);\n      }(), // Choose the best promise for connection error/close\n      // In browser connection close has close code + reason,\n      // while in node error event has these\n      new Promise((resolve, reject) => {\n        void connectionErrorPromise.then(e => {\n          if (e.message) {\n            reject(e);\n          }\n        });\n        void connectionClosedPromise.then(e => {\n          reject(e);\n        });\n      })]);\n    } catch (error) {\n      await this.disconnect();\n      throw error;\n    }\n  }\n  /**\r\n   * Disconnect from obs-websocket server\r\n   */\n\n\n  async disconnect() {\n    if (!this.socket || this.socket.readyState === WebSocketIpml.CLOSED) {\n      return;\n    }\n\n    const connectionClosedPromise = this.internalEventPromise('ConnectionClosed');\n    this.socket.close();\n    await connectionClosedPromise;\n  }\n  /**\r\n   * Update session parameters\r\n   *\r\n   * @param data Reidentify data\r\n   * @returns Identified message data\r\n   */\n\n\n  async reidentify(data) {\n    const identifiedPromise = this.internalEventPromise(`op:${WebSocketOpCode.Identified}`);\n    await this.message(WebSocketOpCode.Reidentify, data);\n    return identifiedPromise;\n  }\n  /**\r\n   * Send a request to obs-websocket\r\n   *\r\n   * @param requestType Request name\r\n   * @param requestData Request data\r\n   * @returns Request response\r\n   */\n\n\n  async call(requestType, requestData) {\n    const requestId = BaseOBSWebSocket.generateMessageId();\n    const responsePromise = this.internalEventPromise(`res:${requestId}`);\n    await this.message(WebSocketOpCode.Request, {\n      requestId,\n      requestType,\n      requestData\n    });\n    const {\n      requestStatus,\n      responseData\n    } = await responsePromise;\n\n    if (!requestStatus.result) {\n      throw new OBSWebSocketError(requestStatus.code, requestStatus.comment);\n    }\n\n    return responseData;\n  }\n  /**\r\n   * Send a batch request to obs-websocket\r\n   *\r\n   * @param requests Array of Request objects (type and data)\r\n   * @param options A set of options for how the batch will be executed\r\n   * @param options.executionType The mode of execution obs-websocket will run the batch in\r\n   * @param options.haltOnFailure Whether obs-websocket should stop executing the batch if one request fails\r\n   * @returns RequestBatch response\r\n   */\n\n\n  async callBatch(requests, options = {}) {\n    const requestId = BaseOBSWebSocket.generateMessageId();\n    const responsePromise = this.internalEventPromise(`res:${requestId}`);\n    await this.message(WebSocketOpCode.RequestBatch, _extends({\n      requestId,\n      requests\n    }, options));\n    const {\n      results\n    } = await responsePromise;\n    return results;\n  }\n  /**\r\n   * Cleanup from socket disconnection\r\n   */\n\n\n  cleanup() {\n    if (!this.socket) {\n      return;\n    }\n\n    this.socket.onopen = null;\n    this.socket.onmessage = null;\n    this.socket.onerror = null;\n    this.socket.onclose = null;\n    this.socket = undefined;\n    this._identified = false; // Cleanup leftovers\n\n    this.internalListeners.removeAllListeners();\n  }\n  /**\r\n   * Create connection to specified obs-websocket server\r\n   *\r\n   * @private\r\n   * @param url Websocket address\r\n   * @returns Promise for hello data\r\n   */\n\n\n  async createConnection(url) {\n    var _this$socket;\n\n    const connectionOpenedPromise = this.internalEventPromise('ConnectionOpened');\n    const helloPromise = this.internalEventPromise(`op:${WebSocketOpCode.Hello}`);\n    this.socket = new WebSocketIpml(url, this.protocol);\n    this.socket.onopen = this.onOpen.bind(this);\n    this.socket.onmessage = this.onMessage.bind(this);\n    this.socket.onerror = this.onError.bind(this);\n    this.socket.onclose = this.onClose.bind(this);\n    await connectionOpenedPromise;\n    const protocol = (_this$socket = this.socket) == null ? void 0 : _this$socket.protocol; // Browsers don't autoclose on missing/wrong protocol\n\n    if (!protocol) {\n      throw new OBSWebSocketError(-1, 'Server sent no subprotocol');\n    }\n\n    if (protocol !== this.protocol) {\n      throw new OBSWebSocketError(-1, 'Server sent an invalid subprotocol');\n    }\n\n    return helloPromise;\n  }\n  /**\r\n   * Send identify message\r\n   *\r\n   * @private\r\n   * @param hello Hello message data\r\n   * @param password Password\r\n   * @param identificationParams Identification params\r\n   * @returns Hello & Identified messages data (combined)\r\n   */\n\n\n  async identify(_ref, password, identificationParams = {}) {\n    let {\n      authentication,\n      rpcVersion\n    } = _ref,\n        helloRest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n    // Set rpcVersion if unset\n    const data = _extends({\n      rpcVersion\n    }, identificationParams);\n\n    if (authentication && password) {\n      data.authentication = authenticationHashing(authentication.salt, authentication.challenge, password);\n    }\n\n    const identifiedPromise = this.internalEventPromise(`op:${WebSocketOpCode.Identified}`);\n    await this.message(WebSocketOpCode.Identify, data);\n    const identified = await identifiedPromise;\n    this._identified = true;\n    this.emit('Identified', identified);\n    return _extends({\n      rpcVersion\n    }, helloRest, identified);\n  }\n  /**\r\n   * Send message to obs-websocket\r\n   *\r\n   * @private\r\n   * @param op WebSocketOpCode\r\n   * @param d Message data\r\n   */\n\n\n  async message(op, d) {\n    if (!this.socket) {\n      throw new Error('Not connected');\n    }\n\n    if (!this.identified && op !== 1) {\n      throw new Error('Socket not identified');\n    }\n\n    const encoded = await this.encodeMessage({\n      op,\n      d\n    });\n    this.socket.send(encoded);\n  }\n  /**\r\n   * Create a promise to listen for an event on internal listener\r\n   * (will be cleaned up on disconnect)\r\n   *\r\n   * @private\r\n   * @param event Event to listen to\r\n   * @returns Event data\r\n   */\n\n\n  async internalEventPromise(event) {\n    return new Promise(resolve => {\n      this.internalListeners.once(event, resolve);\n    });\n  }\n  /**\r\n   * Websocket open event listener\r\n   *\r\n   * @private\r\n   * @param e Event\r\n   */\n\n\n  onOpen(e) {\n    debug('socket.open');\n    this.emit('ConnectionOpened');\n    this.internalListeners.emit('ConnectionOpened', e);\n  }\n  /**\r\n   * Websocket message event listener\r\n   *\r\n   * @private\r\n   * @param e Event\r\n   */\n\n\n  async onMessage(e) {\n    try {\n      const {\n        op,\n        d\n      } = await this.decodeMessage(e.data);\n      debug('socket.message: %d %j', op, d);\n\n      if (op === undefined || d === undefined) {\n        return;\n      }\n\n      switch (op) {\n        case WebSocketOpCode.Event:\n          {\n            const {\n              eventType,\n              eventData\n            } = d; // @ts-expect-error Typescript just doesn't understand it\n\n            this.emit(eventType, eventData);\n            return;\n          }\n\n        case WebSocketOpCode.RequestResponse:\n        case WebSocketOpCode.RequestBatchResponse:\n          {\n            const {\n              requestId\n            } = d;\n            this.internalListeners.emit(`res:${requestId}`, d);\n            return;\n          }\n\n        default:\n          this.internalListeners.emit(`op:${op}`, d);\n      }\n    } catch (error) {\n      debug('error handling message: %o', error);\n    }\n  }\n  /**\r\n   * Websocket error event listener\r\n   *\r\n   * @private\r\n   * @param e ErrorEvent\r\n   */\n\n\n  onError(e) {\n    debug('socket.error: %o', e);\n    const error = new OBSWebSocketError(-1, e.message);\n    this.emit('ConnectionError', error);\n    this.internalListeners.emit('ConnectionError', error);\n  }\n  /**\r\n   * Websocket close event listener\r\n   *\r\n   * @private\r\n   * @param e Event\r\n   */\n\n\n  onClose(e) {\n    debug('socket.close: %s (%d)', e.reason, e.code);\n    const error = new OBSWebSocketError(e.code, e.reason);\n    this.emit('ConnectionClosed', error);\n    this.internalListeners.emit('ConnectionClosed', error);\n    this.cleanup();\n  }\n\n} // https://github.com/developit/microbundle/issues/531#issuecomment-575473024\n// Not using ESM export due to it also being detected and breaking rollup based bundlers (vite)\n\nBaseOBSWebSocket.requestCounter = 1;\n\nif (typeof exports !== 'undefined') {\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n}\n\nclass OBSWebSocket extends BaseOBSWebSocket {\n  constructor(...args) {\n    super(...args);\n    this.protocol = 'obswebsocket.json';\n  }\n\n  async encodeMessage(data) {\n    return JSON.stringify(data);\n  }\n\n  async decodeMessage(data) {\n    return JSON.parse(data);\n  }\n\n}\n\nexport { EventSubscription, OBSWebSocketError, RequestBatchExecutionType, WebSocketOpCode, OBSWebSocket as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}